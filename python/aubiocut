#! /usr/bin/python

""" this file was written by Paul Brossier 
  it is released under the GNU/GPL license.
"""

import sys
from aubio.tasks import *

usage = "usage: %s [options] -i soundfile" % sys.argv[0]

def parse_args():
        from optparse import OptionParser
        parser = OptionParser(usage=usage)
        parser.add_option("-i","--input",
                          action="store", dest="filename", 
                          help="input sound file")
        parser.add_option("-m","--mode", action="callback", 
                          callback=check_onset_mode, dest="mode", default='dual', 
                          help="onset detection mode [default=dual] \
                          complexdomain|hfc|phase|specdiff|energy|kl|mkl|dual")
        parser.add_option("-B","--bufsize",
                          action="store", dest="bufsize", default=512, 
                          help="buffer size [default=1024]")
        parser.add_option("-H","--hopsize",
                          action="store", dest="hopsize", default=256, 
                          help="overlap size [default=256]")
        parser.add_option("-t","--threshold",
                          action="store", dest="threshold", default=0.650, 
                          help="onset peak picking threshold [default=0.650]")
        parser.add_option("-s","--silence",
                          action="store", dest="silence", default=-70, 
                          help="silence threshold [default=-70]")
        parser.add_option("-M","--mintol",
                          action="store", dest="mintol", default=0.048, 
                          help="minimum inter onset interval [default=0.048]")
        parser.add_option("-D","--delay",
                          action="store", dest="delay",  
                          help="number of seconds to take back [default=system]\
                          default system delay is 3*hopsize/samplerate")
        parser.add_option("-L","--localmin",
                          action="store_true", dest="localmin", default=False, 
                          help="use local minima after peak detection")
        parser.add_option("-c","--cut",
                          action="store_true", dest="cut", default=False,
                          help="cut input sound file at detected labels \
                          best used with option -L")
        parser.add_option("-d","--derivate",
                          action="store_true", dest="derivate", default=False, 
                          help="derivate onset detection function")
        parser.add_option("-S","--silencecut",
                          action="store_true", dest="silencecut", default=False,
                          help="outputs silence locations")
        parser.add_option("-z","--zerocross",
                          action="store", dest="zerothres", default=0.008, 
                          help="zero-crossing threshold for slicing [default=0.00008]")
        # plotting functions
        parser.add_option("-p","--plot",
                          action="store_true", dest="plot", default=False, 
                          help="draw plot")
        parser.add_option("-O","--outplot",
                          action="store", dest="outplot", default=None, 
                          help="save plot to output.{ps,png}")
        parser.add_option("-v","--verbose",
                          action="store_true", dest="verbose", default=False,
                          help="make lots of noise [default]")
        parser.add_option("-q","--quiet",
                          action="store_false", dest="verbose", default=False, 
                          help="be quiet")
        # to be implemented
        parser.add_option("-b","--beat",
                          action="store_true", dest="beat", default=False,
                          help="NOT IMPLEMENTED output beat locations")
        (options, args) = parser.parse_args()
        if not options.filename: 
                 print "no file name given\n", usage
                 sys.exit(1)
        return options, args

options, args = parse_args()

filename   = options.filename
samplerate = float(sndfile(filename).samplerate())
hopsize    = int(options.hopsize)
bufsize    = int(options.bufsize)
step       = float(samplerate)/float(hopsize)
threshold  = float(options.threshold)
zerothres  = float(options.zerothres)
silence    = float(options.silence)
mintol     = float(options.mintol)*step
mode       = options.mode
# default take back system delay
if options.delay: delay = float(options.delay)
else:             delay = 3./step

if options.beat:
        #onsets = getbeats(filename,threshold,silence,mode=options.mode)
        exit("not implemented yet")
elif options.silencecut:
        onsets = getsilences(filename,hopsize=hopsize,silence=silence)
elif options.plot: storefunc=True
else:              storefunc=False

lonsets, lofunc = [], []
for i in range(len(mode)):
        onsets, ofunc = getonsets(filename,threshold,silence,
                mode=mode[i],localmin=options.localmin,
                derivate=options.derivate,
                bufsize=bufsize,hopsize=hopsize,storefunc=True)

        # take back system delay
        if delay != 0:
                for i in range(len(onsets)):
                        onsets[i] -= delay*step

        # prune doubled 
        if mintol > 0:
                last = -2*mintol
                newonsets = []
                for new in onsets:
                        if (new - last > mintol): 
                                newonsets.append(new)
                        last = new
                onsets = newonsets

        lonsets.append(onsets)
        lofunc.append(ofunc)

# print times in second
if options.verbose:
        maxonset = 0
        for j in range(len(mode)):
                for i in range(len(lonsets[j])):
                        print lonsets[j][i]/step

if options.plot:
        from aubio.gnuplot import plot_onsets
        plot_onsets(filename, lonsets, lofunc, 
                samplerate=samplerate, hopsize=hopsize, outplot=options.outplot)

if options.cut:
        cutfile(filename,onsets,zerothres=zerothres,bufsize=bufsize,hopsize=hopsize)
